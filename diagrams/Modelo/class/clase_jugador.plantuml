
@startuml
abstract Jugador{
-id:int
-inventario:Inventario
-nombre:Nombre
-color:String
-edificioInicialConstruido:bool
+establecerNombre(nombre)
+ConstruirEdificio(coordenada,Edificio)
+generarUnidad(coordenadaEdificio,unidad)
-establecerAtributosBasicos(nombre,color,gasInicial:int,mineralInicial,suministros:int)
+compararAtributosBasicosConOtrosJugadores(listaJugadores)
-compararNombre(Jugador)
-nombreEsIgual(nombre):bool
-compararColor(Jugador)
-colorEsIgual(color):bool
-compararRaza(Jugador)
+moverUnidad(coordenada,dirreccion)+destruirUnidad(coordenada)
+destruirEdificio(coordenada)
+atacar(coordenadaUnidad,coordenadaObjetivo)
+establecerId(id)
+evolucionar(coordenada,unidadAEvolucionar)
+actualizar()
+aniadirseAListaSiNoFueDerrotado(listaDeJugadores)
-fueDerrotado():bool
+devolverNombre():String
{abstract}+devolverMediaDeVictoria():List<String>
{abstract+ingresarUnidadAUnEdificio(coordenadaEdificio,coordenadaUnidad)
{abstract}+iniciarseEnMapa()
{abstract}+toData():ObjectNode


}
class JugadorProtoss{
-
+JugadorProtoss(nombre,color)
+devolverMediaDeVictoria():List<String>
+ingresarUnidadAUnEdificio(coordenadaEdificio,coordenadaUnidad)
+iniciarseEnMapa()
+toData():ObjectNode
}


class JugadorZerg{
+JugadorZerg(nombre,color)
+evolucionar(coordenada,unidadAEvolucionar)
+ingresarUnidadAUnEdificio(coordenadaEdificio,coordenadaUnidad)
+iniciarseEnMapa()
+devolverMediaDeVictoria():List<String>
+toData():ObjectNode
}
class Nombre{
+Nombre(nombre:String)
+esIgual(nombre:Nombre):bool
+devolverValor():String
+toData():ObjectNode
}





Jugador -left* Inventario
mapa <.. Jugador

Jugador -right* Nombre

Jugador <|--- JugadorProtoss
Jugador <|-- JugadorZerg

@enduml