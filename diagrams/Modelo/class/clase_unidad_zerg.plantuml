@startuml
abstract UnidadZerg{

+ocupar(terreno):bool
+consumirRecursosParaGenerarse(inventario)
+consumirRecursosParaEvolucion(inventario)
+ejecutarDanio(danioTerrestre,danioAereo)
+regenerar()
+toData():objectNode
}


class Devorador{
+Guardian()
+generarse(edificio,inventario):Unidad
+ocupar(terreno):bool
+ejecutarAtaque(objetivo:Coordenada,mapa)
+actualizarUnidad(inventario)
}

class AmoSupremo{
-radioDeVisibilidad:int
+AmoSupremo()
+actualizarUnidad(inventario)
+ocupar(terreno):bool
+generarse(edificio,inventario):Unidad
+agregarSuministro(inventario)
-actualizarMapa()
-invisibilizarTerrenosAnteriores()
-visibilizarTerrenosAnteriores()
-buscarCoordenadasAVisibilizar()
}
class Guardian{
+Guardian()
+actualizarUnidad(inventario)
+ocupar(terreno):bool
+generarse(edificio,inventario):Unidad
}
class Hidralisco{
+Hidralisco()
+generarse(edificio,inventario):Unidad
+ocupar(terreno):bool
+actualizarUnidad(inventario)

}
class Mutalisco{
+Mutalisco()
+actualizarUnidad(inventario)
+ocupar(terreno):bool
+evolucionar(unidad,inventario):unidad
+generarse(edificio,inventario):Unidad
}
class Zangano{
-terreno:Terreno
+Zangano()
+Zangano(gasVespeno,minerales,coordenada)
+generarse(edificio,inventario):Unidad
+ocupar(terreno):bool
+extraerRecurso(inventario)
+actualizarUnidad(inventario)
}
class Zerling{
+Zerling()
+generarse(edificio,inventario):Unidad
+ocupar(terreno):bool

+actualizarUnidad(inventario)

}
interface EstadosUnidad
UnidadZerg -up-> EstadosUnidad
UnidadZerg <|-- AmoSupremo
UnidadZerg <|-left- Devorador
UnidadZerg <|--- Guardian
UnidadZerg <|---- Hidralisco
UnidadZerg <|--- Mutalisco
UnidadZerg <|-- Zangano
UnidadZerg <|-right- Zerling
@enduml